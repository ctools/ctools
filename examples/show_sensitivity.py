#! /usr/bin/env python
# ==========================================================================
# Display differential sensitivity plot generated by cssens
#
# Copyright (C) 2015-2021 Juergen Knoedlseder
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ==========================================================================
import sys
import math
try:
    import matplotlib.pyplot as plt
    plt.figure()
    plt.close()
except (ImportError, RuntimeError):
    print('This script needs the "matplotlib" module')
    sys.exit()
import gammalib
import cscripts


# ===================== #
# Read sensitivity data #
# ===================== #
def read_sensitivity(filename):
    """
    Read sensitivity data

    Parameters
    ----------
    filename : str
        Name of FITS or CSV file

    Returns
    -------
    sensitivity : dict
        Dictionary with sensitivity data
    """
    # Read sensitivity data dependent on file type
    fname = gammalib.GFilename(filename)
    if fname.is_fits():
        sensitivity = read_sensitivity_fits(filename)
    else:
        sensitivity = read_sensitivity_csv(filename)

    # Return sensitivity
    return sensitivity


# =================================== #
# Read sensitivity data from CSV file #
# =================================== #
def read_sensitivity_csv(filename):
    """
    Read sensitivity data from CSV file

    Parameters
    ----------
    filename : str
        Name of CSV file

    Returns
    -------
    sensitivity : dict
        Dictionary with sensitivity data
    """
    # Read filename
    csv = gammalib.GCsv(filename,',')

    # Create dictionnary
    sensitivity = {}
    for column in range(csv.ncols()):
        name   = csv[0,column].rstrip('\r')
        values = []
        for row in range(csv.nrows()-1):
            values.append(float(csv[row+1,column]))
        sensitivity[name] = values

    # Check where file contains differential or integral sensitivity
    mode = 'Integral'
    if 'emax' in sensitivity:
        emax_ref = -1.0
        for value in sensitivity['emax']:
            if emax_ref < 0.0:
                emax_ref = value
            elif emax_ref != value:
                mode = 'Differential'
                break

    # Add mode
    sensitivity['mode'] = mode

    # Add linear energy values
    if mode == 'Differential':
        if 'loge' in sensitivity:
            name   = 'energy'
            values = []
            for value in sensitivity['loge']:
                values.append(math.pow(10.0, value))
            sensitivity[name] = values
    else:
        if 'emin' in sensitivity:
            name   = 'energy'
            values = []
            for value in sensitivity['emin']:
                values.append(value)
            sensitivity[name] = values

    # Return
    return sensitivity


# ==================================== #
# Read sensitivity data from FITS file #
# ==================================== #
def read_sensitivity_fits(filename):
    """
    Read sensitivity data from FITS file

    Parameters
    ----------
    filename : str
        Name of FITS file

    Returns
    -------
    sensitivity : dict
        Dictionary with sensitivity data
    """
    # Open FITS file
    fits = gammalib.GFits(filename)

    # Get sensitivity table
    table = fits.table('SENSITIVITY')

    # Get relevant columns
    c_e_mean      = table['E_MEAN']
    c_e_min       = table['E_MIN']
    c_e_max       = table['E_MAX']
    c_sensitivity = table['SENSITIVITY']

    # Get mode
    mode = table.card('TYPE').string()

    # Initialise vectors
    energies      = []
    sensitivities = []

    # Fill vectors
    nrows = table.nrows()
    for row in range(nrows):
        if mode == 'Differential':
            energies.append(c_e_mean[row])
        else:
            energies.append(c_e_min[row])
        sensitivities.append(c_sensitivity[row])


    # Set dictionary
    sensitivity = {'mode'        : mode,
                   'energy'      : energies,
                   'sensitivity' : sensitivities}

    # Return
    return sensitivity


# ===================== #
# Plot sensitivity data #
# ===================== #
def plot_sensitivity(sensitivity, filename, plotfile):
    """
    Plot sensitivity data

    Parameters
    ----------
    sensitivity : dict
        Dictionary with sensitivity information
    filename : str
        Name of CSV file
    plotfile : str
        Plot file name
    """
    # Build title
    title = sensitivity['mode'] + ' sensitivity ('+filename+')'

    # Create figure
    plt.figure()

    # Set plot attributes
    plt.title(title)
    plt.loglog()
    plt.grid()

    # Show differential sensitivity
    plt.plot(sensitivity['energy'], sensitivity['sensitivity'], 'ro-')

    # Set labels
    plt.xlabel('Energy (TeV)')
    if sensitivity['mode'] == 'Differential':
        plt.ylabel(r'E $\times$ F(E) (erg cm$^{-2}$ s$^{-1}$)')
    else:
        plt.ylabel(r'E $\times$ F($>$E) (erg cm$^{-2}$ s$^{-1}$)')

    # Show figure
    if len(plotfile) > 0:
        plt.savefig(plotfile)
    else:
        plt.show()

    # Return
    return


# ================ #
# Show sensitivity #
# ================ #
def show_sensitivity():
    """
    Show sensitivity
    """
    # Set usage string
    usage = 'show_sensitivity.py [-p plotfile] [file]'

    # Set default options
    options = [{'option': '-p', 'value': ''}]

    # Get arguments and options from command line arguments
    args, options = cscripts.ioutils.get_args_options(options, usage)

    # Extract script parameters from options
    plotfile = options[0]['value']
    if len(args) > 0:
        filename = args[0]
    else:
        filename = 'sensitivity.dat'

    # Read sensitivity data
    sensitivity = read_sensitivity(filename)

    # Plot sensitivity data
    plot_sensitivity(sensitivity, filename, plotfile)

    # Return
    return


# ======================== #
# Main routine entry point #
# ======================== #
if __name__ == '__main__':

    # Show sensitivity
    show_sensitivity()
